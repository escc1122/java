http://www.cnblogs.com/xdp-gacl/p/3777987.html


一、序列化和反序列化的概念

　　把對象轉換為字節序列的過程稱為對象的序列化。
　　把字節序列恢復為對象的過程稱為對象的反序列化。
　　對象的序列化主要有兩種用途：
　　1） 把對象的字節序列永久地保存到硬盤上，通常存放在一個文件中；
　　2） 在網絡上傳送對象的字節序列。

　　在很多應用中，需要對某些對象進行序列化，讓它們離開內存空間，入住物理硬盤，以便長期保存。比如最常見的是Web服務器中的Session對象，當有 10萬用戶並發訪問，就有可能出現10萬個Session對象，內存可能吃不消，於是Web容器就會把一些seesion先序列化到硬盤中，等要用了，再把保存在硬盤中的對象還原到內存中。

　　當兩個進程在進行遠程通信時，彼此可以發送各種類型的數據。無論是何種類型的數據，都會以二進制序列的形式在網絡上傳送。發送方需要把這個Java對象轉換為字節序列，才能在網絡上傳送；接收方則需要把字節序列再恢復為Java對象。
二、JDK類庫中的序列化API

　　java.io.ObjectOutputStream代表對象輸出流，它的writeObject(Object obj)方法可對參數指定的obj對象進行序列化，把得到的字節序列寫到一個目標輸出流中。
　　java.io.ObjectInputStream代表對象輸入流，它的readObject()方法從一個源輸入流中讀取字節序列，再把它們反序列化為一個對象，並將其返回。
　　只有實現了Serializable和Externalizable接口的類的對象才能被序列化。Externalizable接口繼承自 Serializable接口，實現Externalizable接口的類完全由自身來控制序列化的行為，而僅實現Serializable接口的類可以 採用默認的序列化方式 。
　　對象序列化包括如下步驟：
　　1） 創建一個對象輸出流，它可以包裝一個其他類型的目標輸出流，如文件輸出流；
　　2） 通過對象輸出流的writeObject()方法寫對象。

　　對象反序列化的步驟如下：
　　1） 創建一個對象輸入流，它可以包裝一個其他類型的源輸入流，如文件輸入流；
　　2） 通過對象輸入流的readObject()方法讀取對象。
